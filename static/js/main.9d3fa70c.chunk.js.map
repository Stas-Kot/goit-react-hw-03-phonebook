{"version":3,"sources":["components/PhonebookForm/PhonebookForm.styles.jsx","components/PhonebookForm/PhonebookForm.jsx","components/ContactListItem/ContactListItem.styles.jsx","components/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.jsx","components/SearchContact/SearchContact.styles.jsx","components/SearchContact/SearchContact.jsx","App.js","index.js"],"names":["Form","BtnAddContact","Input","PhonebookForm","state","name","number","handleSetUserInfo","e","target","value","setState","handleAddContact","preventDefault","props","handleSubmit","reset","this","autocomplete","onSubmit","onChange","type","pattern","title","required","Component","ContactItem","DeleteBtn","ContactListItem","deleteContact","onClick","ContactList","contacts","handleDelete","map","id","SearchTitle","SearchContact","inputChange","App","filter","formSubmitHandler","contact","uuidv4","find","savedContact","alert","prevState","handleSearch","contactId","getFiltredContacts","normalizedFilter","toLowerCase","trim","includes","parsedContacts","JSON","parse","localStorage","getItem","prevProps","setItem","stringify","filtredContacts","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9d3fa70c.chunk.js","sourcesContent":["import styled from '@emotion/styled/macro';\n\nexport const Form = styled.form`\n  width: 350px;\n  border: 2px solid black;\n  padding: 30px 15px;\n\n  & label {\n    font-weight: 500;\n  }\n  & p {\n    margin: 0;\n    margin-bottom: 10px;\n  }\n`;\n\nexport const BtnAddContact = styled.button`\n  display: block;\n  border-radius: 8px;\n  background-color: #fff;\n  color: black;\n  font-weight: 500;\n  padding: 5px 10px;\n  box-shadow: 0px 1px 3px rgb(0 0 0 / 12%), 0px 1px 1px rgb(0 0 0 / 14%),\n    0px 2px 1px rgb(0 0 0 / 20%);\n  border-color: transparent;\n  border: 1px solid grey;\n  cursor: pointer;\n  &:hover {\n    background-color: #6ea2de;\n  }\n`;\n\nexport const Input = styled.input`\n  margin-bottom: 30px;\n  &:focus {\n    border: 2px solid #6ea2de;\n    box-shadow: 0px 0px 10px #6ea2de;\n    outline: none;\n  }\n`;\n","import { Component } from 'react';\nimport { Form, BtnAddContact, Input } from './PhonebookForm.styles';\n\nclass PhonebookForm extends Component {\n  state = {\n    name: '',\n    number: '',\n  };\n\n  handleSetUserInfo = e => {\n    const { name, value } = e.target;\n    this.setState({ [name]: value });\n  };\n\n  handleAddContact = e => {\n    e.preventDefault();\n    this.props.handleSubmit(this.state);\n\n    this.reset();\n  };\n\n  reset = () => {\n    this.setState({ name: '', number: '' });\n  };\n\n  render() {\n    const { name, number } = this.state;\n    return (\n      <Form autocomplete=\"off\" onSubmit={this.handleAddContact}>\n        <label>\n          <p>Name</p>\n          <Input\n            onChange={this.handleSetUserInfo}\n            value={name}\n            type=\"text\"\n            name=\"name\"\n            autocomplete=\"off\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n          />\n        </label>\n        <label>\n          <p>Number</p>\n          <Input\n            onChange={this.handleSetUserInfo}\n            value={number}\n            type=\"tel\"\n            name=\"number\"\n            autocomplete=\"off\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n          />\n        </label>\n        <BtnAddContact type=\"submit\">Add contact</BtnAddContact>\n      </Form>\n    );\n  }\n}\n\nexport default PhonebookForm;\n","import styled from '@emotion/styled/macro';\n\nexport const ContactItem = styled.li`\n  width: 400px;\n  font-size: 20px;\n  font-weight: 500;\n  &:not(:last-child) {\n    margin-bottom: 10px;\n  }\n`;\n\nexport const DeleteBtn = styled.button`\n  margin-left: 30px;\n  margin-right: 0;\n`;\n","import PropTypes from 'prop-types';\nimport { ContactItem, DeleteBtn } from './ContactListItem.styles';\n\nexport default function ContactListItem({ name, number, deleteContact }) {\n  return (\n    <ContactItem>\n      {name}: {number}\n      <DeleteBtn type=\"button\" onClick={deleteContact}>\n        Delete\n      </DeleteBtn>\n    </ContactItem>\n  );\n}\n\nContactListItem.propTypes = {\n  number: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  deleteContact: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport ContactListItem from 'components/ContactListItem/ContactListItem';\n\nexport default function ContactList({ contacts, handleDelete }) {\n  return (\n    <ul>\n      {contacts.map(({ id, name, number }) => (\n        <ContactListItem\n          key={id}\n          name={name}\n          number={number}\n          deleteContact={() => handleDelete(id)}\n        />\n      ))}\n    </ul>\n  );\n}\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n    }),\n  ),\n  handleDelete: PropTypes.func,\n};\n","import styled from '@emotion/styled/macro';\n\nexport const SearchTitle = styled.p`\n  font-weight: 500;\n  font-size: 18px;\n  margin: 0;\n`;\n","import PropTypes from 'prop-types';\nimport { SearchTitle } from './SearchContact.styles';\n\nexport default function SearchContact({ value, inputChange }) {\n  return (\n    <label>\n      <SearchTitle>Find contacts by name</SearchTitle>\n      <input type=\"text\" value={value} onChange={inputChange} />\n    </label>\n  );\n}\nSearchContact.propTypes = {\n  value: PropTypes.string,\n  inputChange: PropTypes.func.isRequired,\n};\n","import { Component } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport PhonebookForm from 'components/PhonebookForm/PhonebookForm';\nimport ContactList from 'components/ContactList/ContactList';\nimport SearchContact from 'components/SearchContact/SearchContact';\n\nclass App extends Component {\n  state = {\n    contacts: [\n      { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n      { id: 'id-2', name: 'Hermione Klinel', number: '443-89-12' },\n      { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n      { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n    ],\n    filter: '',\n  };\n\n  formSubmitHandler = ({ name, number }) => {\n    const contact = {\n      name,\n      number,\n      id: uuidv4(),\n    };\n    this.state.contacts.find(savedContact => savedContact.name === name)\n      ? alert(`${name} is already in contacts`)\n      : this.setState(prevState => ({\n          contacts: [...prevState.contacts, contact],\n        }));\n  };\n\n  handleSearch = e => {\n    this.setState({ filter: e.target.value });\n  };\n\n  handleDelete = contactId => {\n    this.setState(prevState => ({\n      contacts: prevState.contacts.filter(contact => contact.id !== contactId),\n    }));\n  };\n\n  getFiltredContacts = () => {\n    const { contacts, filter } = this.state;\n    const normalizedFilter = filter.toLowerCase().trim();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n  };\n\n  componentDidMount() {\n    const parsedContacts = JSON.parse(localStorage.getItem('contacts'));\n    if (parsedContacts) {\n      this.setState({ contacts: parsedContacts });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState !== this.state) {\n      localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n    }\n  }\n\n  render() {\n    const { filter } = this.state;\n    const filtredContacts = this.getFiltredContacts();\n\n    return (\n      <div>\n        <h1>Phonebook</h1>\n        <PhonebookForm handleSubmit={this.formSubmitHandler} />\n\n        <h2>Contacts</h2>\n        <SearchContact value={filter} inputChange={this.handleSearch} />\n        <ContactList\n          contacts={filtredContacts}\n          handleDelete={this.handleDelete}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}